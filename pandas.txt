1. Series (almost similar with numpy array, but it allows indexing)
	ser1 = pd.Series(data=[10,20,30],index=['A','B','C']) # data, index
	=> A    10
	   B	20
	   C	30
	# data not only numbers but also list, dictionary, string etc
	ser1['A'] = 10 # indexing
	* / + -


2. DataFrames
	# creating a dataframe
	df = pd.DataFrame(randn(5,4),['A','B','C','D','E'],['W','X','Y','Z']) # (values,row,column)
	# calling 'W' column
	df['W']
	# checking type of pandas series
	type(df['W']
	# checking type dataframe
	type(df)
	
	# calling multiple column
	df[['W','Z']] => column 'W' and 'Z" to choose 2 columns use 2 bracket
	# you can do some arithmetic with creating new column
	df['new'] = df['W'] + df['Y']
	
	# delete row and column (axis=1 for column,axis=0 for row, inplace for permanent)
	df.drop('W',axis=1,inplace=True) # 'A' is column
	df.drop('E',axis=0,inplace=True) # 'E' is index(row)
	# matrix shape (row x column)
	df.shape
	
	# calling rows
	df.loc['C'] => 'C' is the name of the index or identity
	df.iloc[2] => selecting row by numerical index position
	df.loc['B','Y'] => row B column Y
	df.loc[['A','B'],['X','Y']] => row A column B
	
	# using boolean 
	df > 0 => will result True or False
	df[boolean]
	df[df['W']>0]['Y']
	df[(df['W']>0) & (df['Y']>1)] # Don't use 'and' 'or'
	df[(df['W']>0) | (df['Y']>1)]
	
	# Set a column to be index
	df.set_index()
	
	# checking names of index
	df.index.names
	df.xs(['G1','1']) => another way to call data based on index data (not index name)


3. Missing Data
	# remove row if any NaN/missing point
	df.dropna(thresh=2) => thresh means drop if at least 2 NaN exist in a column 
	# remove column if any NaN
	df.dropna(axis=1)
	
	# input data to NaN value
	df.fillna('FILL IT') 
	

4. Groupby
	df.groupby()
	df.groupby().mean()
	df.groupby().std()
	df.groupby().describe()
	df.groupby().describe().transpose()
	df.groupby(['The grouping column'])['The grouped column'].describe() # aggregate function
	# grouping with two features
	df.groupby(['W','X'])['Y'].mean() # 'W' first then 'X'
	# the features which was created as index turn to be column again with the most right position
	df = df.reset_index(level='X') # then
	df = df.reset_index(level='W')
	

5. Merging, Joining, Concatening
	# Mix in one data frame for axis = 0
	# shape should be the same
	pd.concat([df1,df2,df3]) 
	pd.concat([df1,df2,df3],axis=1)
	
	# Dictionaries also can be a data frame, key as column, value as data
	# merge similar with join in SQL, can be inner, outer, left, right
	pd.merge(df1,df2,how='inner',on='key') # or you can
	pd.merge(df1,df2,how='inner',on=['key1','key2'])
	
	# join a bit similar with inner merge except your key is in index
	# df1 and df2 have the same index
	df1.join(df2)


6. Operations
	# mention every unique data from column 'A'
	df['A'].unique()
	# count how much unique value from column 'A'
	df['A'].nunique()
	# how many times data in a column show up
	df['A'].value_counts() 
	# apply function to specific column
	df['A'].apply(func) 
	df['A'].apply(len)
	df['A'].apply(lambda x: x*2)
	
	# permanently delete column
	del df['A'] 
	# mention every columns name
	df.columns
	# mention every index name
	df.index
	# sort similar with SQL
	df.sort_values()
	# checking if it is True that data is NULL
	df.isnull() 
	# column D become values/datas inserted, 'A' and 'B' become index, and data inside'C' become column
	df.pivot_table(values='D',index=['A', 'B'],columns=['C'])


7. Data Input & Output
	# csv
	df = pd.read_csv('text')
	df.to_csv()
	# excel
	pd.read_excel()
	df.to_excel()
	# html
	pd.read_html()
	
	#SQL using sqlalchemy
	from sqlalchemy import create_engine
	engine = create_engine('sqlite:///:memory:')
	df.to_sql('my_table',engine)
	sql_df = pd.read_sql('my_table',con=engine)
		
	
